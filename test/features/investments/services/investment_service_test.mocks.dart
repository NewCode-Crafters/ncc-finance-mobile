// Mocks generated by Mockito 5.4.6 from annotations
// in bytebank/test/features/investments/services/investment_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:bytebank/features/dashboard/models/balance.dart' as _i5;
import 'package:bytebank/features/dashboard/services/balance_service.dart'
    as _i3;
import 'package:bytebank/features/transactions/models/financial_transaction.dart'
    as _i7;
import 'package:bytebank/features/transactions/services/financial_transaction_service.dart'
    as _i6;
import 'package:cloud_firestore/cloud_firestore.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeDocumentReference_0<T extends Object?> extends _i1.SmartFake
    implements _i2.DocumentReference<T> {
  _FakeDocumentReference_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFirebaseFirestore_1 extends _i1.SmartFake
    implements _i2.FirebaseFirestore {
  _FakeFirebaseFirestore_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCollectionReference_2<T1 extends Object?> extends _i1.SmartFake
    implements _i2.CollectionReference<T1> {
  _FakeCollectionReference_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDocumentSnapshot_3<T1 extends Object?> extends _i1.SmartFake
    implements _i2.DocumentSnapshot<T1> {
  _FakeDocumentSnapshot_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [BalanceService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBalanceService extends _i1.Mock implements _i3.BalanceService {
  MockBalanceService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i5.Balance>> getBalances({required String? userId}) =>
      (super.noSuchMethod(
            Invocation.method(#getBalances, [], {#userId: userId}),
            returnValue: _i4.Future<List<_i5.Balance>>.value(<_i5.Balance>[]),
          )
          as _i4.Future<List<_i5.Balance>>);

  @override
  _i4.Future<void> updateBalanceOnTransaction({
    required String? userId,
    required String? balanceId,
    required double? transactionAmount,
    _i2.WriteBatch? batch,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#updateBalanceOnTransaction, [], {
              #userId: userId,
              #balanceId: balanceId,
              #transactionAmount: transactionAmount,
              #batch: batch,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [FinancialTransactionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFinancialTransactionService extends _i1.Mock
    implements _i6.FinancialTransactionService {
  MockFinancialTransactionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.DocumentReference<Object?>> createTransaction({
    required String? userId,
    required Map<String, dynamic>? data,
    _i2.WriteBatch? batch,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createTransaction, [], {
              #userId: userId,
              #data: data,
              #batch: batch,
            }),
            returnValue: _i4.Future<_i2.DocumentReference<Object?>>.value(
              _FakeDocumentReference_0<Object?>(
                this,
                Invocation.method(#createTransaction, [], {
                  #userId: userId,
                  #data: data,
                  #batch: batch,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.DocumentReference<Object?>>);

  @override
  _i4.Future<List<_i7.FinancialTransaction>> getTransactions({
    required String? userId,
    DateTime? startDate,
    DateTime? endDate,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getTransactions, [], {
              #userId: userId,
              #startDate: startDate,
              #endDate: endDate,
            }),
            returnValue: _i4.Future<List<_i7.FinancialTransaction>>.value(
              <_i7.FinancialTransaction>[],
            ),
          )
          as _i4.Future<List<_i7.FinancialTransaction>>);

  @override
  _i4.Future<void> deleteTransaction({
    required String? userId,
    required String? transactionId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#deleteTransaction, [], {
              #userId: userId,
              #transactionId: transactionId,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> editTransaction({
    required String? userId,
    required String? transactionId,
    required Map<String, dynamic>? updateData,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#editTransaction, [], {
              #userId: userId,
              #transactionId: transactionId,
              #updateData: updateData,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [DocumentReference].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockDocumentReference<T extends Object?> extends _i1.Mock
    implements _i2.DocumentReference<T> {
  MockDocumentReference() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FirebaseFirestore get firestore =>
      (super.noSuchMethod(
            Invocation.getter(#firestore),
            returnValue: _FakeFirebaseFirestore_1(
              this,
              Invocation.getter(#firestore),
            ),
          )
          as _i2.FirebaseFirestore);

  @override
  String get id =>
      (super.noSuchMethod(
            Invocation.getter(#id),
            returnValue: _i8.dummyValue<String>(this, Invocation.getter(#id)),
          )
          as String);

  @override
  _i2.CollectionReference<T> get parent =>
      (super.noSuchMethod(
            Invocation.getter(#parent),
            returnValue: _FakeCollectionReference_2<T>(
              this,
              Invocation.getter(#parent),
            ),
          )
          as _i2.CollectionReference<T>);

  @override
  String get path =>
      (super.noSuchMethod(
            Invocation.getter(#path),
            returnValue: _i8.dummyValue<String>(this, Invocation.getter(#path)),
          )
          as String);

  @override
  _i2.CollectionReference<Map<String, dynamic>> collection(
    String? collectionPath,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#collection, [collectionPath]),
            returnValue: _FakeCollectionReference_2<Map<String, dynamic>>(
              this,
              Invocation.method(#collection, [collectionPath]),
            ),
          )
          as _i2.CollectionReference<Map<String, dynamic>>);

  @override
  _i4.Future<void> delete() =>
      (super.noSuchMethod(
            Invocation.method(#delete, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> update(Map<Object, Object?>? data) =>
      (super.noSuchMethod(
            Invocation.method(#update, [data]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i2.DocumentSnapshot<T>> get([_i2.GetOptions? options]) =>
      (super.noSuchMethod(
            Invocation.method(#get, [options]),
            returnValue: _i4.Future<_i2.DocumentSnapshot<T>>.value(
              _FakeDocumentSnapshot_3<T>(
                this,
                Invocation.method(#get, [options]),
              ),
            ),
          )
          as _i4.Future<_i2.DocumentSnapshot<T>>);

  @override
  _i4.Stream<_i2.DocumentSnapshot<T>> snapshots({
    bool? includeMetadataChanges = false,
    _i2.ListenSource? source = _i2.ListenSource.defaultSource,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#snapshots, [], {
              #includeMetadataChanges: includeMetadataChanges,
              #source: source,
            }),
            returnValue: _i4.Stream<_i2.DocumentSnapshot<T>>.empty(),
          )
          as _i4.Stream<_i2.DocumentSnapshot<T>>);

  @override
  _i4.Future<void> set(T? data, [_i2.SetOptions? options]) =>
      (super.noSuchMethod(
            Invocation.method(#set, [data, options]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i2.DocumentReference<R> withConverter<R>({
    required _i2.FromFirestore<R>? fromFirestore,
    required _i2.ToFirestore<R>? toFirestore,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#withConverter, [], {
              #fromFirestore: fromFirestore,
              #toFirestore: toFirestore,
            }),
            returnValue: _FakeDocumentReference_0<R>(
              this,
              Invocation.method(#withConverter, [], {
                #fromFirestore: fromFirestore,
                #toFirestore: toFirestore,
              }),
            ),
          )
          as _i2.DocumentReference<R>);
}
